name: CI lint

on: [push, pull_request, workflow_dispatch]

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up linters and formatters
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx

      - name: Run flake8
        id: flake8
        continue-on-error: true
        run: |
          pipx run flake8 --count --statistics --max-line-length=88  .

      - name: Run black
        id: black
        continue-on-error: true
        run: |
          pipx run black --check --diff  .

      - name: Run isort
        id: isort
        continue-on-error: true
        run: |
          pipx run isort --check --profile black --df .

      - name: Run mdl
        id: mdl
        continue-on-error: true
        run: |
          sudo snap install mdl
          mdl *.md

      - name: Run mypy
        id: mypy
        continue-on-error: true
        run: |
          pipx run mypy test_vtjson.py vtjson.py --strict --explicit-package-bases --ignore-missing-imports

      - name: Check linters and formatters status
        run: |
          if [[ "${{ steps.flake8.outcome }}" == "success" ]]; then echo "✔ flake8"; else echo "❌ flake8"; fi
          if [[ "${{ steps.black.outcome }}" == "success" ]]; then echo "✔ black"; else echo "❌ black"; fi
          if [[ "${{ steps.isort.outcome }}" == "success" ]]; then echo "✔ isort"; else echo "❌ isort"; fi
          if [[ "${{ steps.mdl.outcome }}" == "success" ]]; then echo "✔ mdl"; else echo "❌ mdl"; fi
          if [[ "${{ steps.mypy.outcome }}" == "success" ]]; then echo "✔ mdl"; else echo "❌ mdl"; fi
          if [[ "${{ steps.black.outcome }}" == "failure" || "${{ steps.isort.outcome }}" == "failure" || "${{ steps.flake8.outcome }}" == "failure" || "${{ steps.mypy.outcome }}" == "failure" ]]; then exit 1; fi

      - name: Print formatting instructions
        if: ${{ failure() }}
        run: |
          echo "Run the following commands to format the code:"
          echo "black --exclude='env' ."
          echo "isort --profile black --skip env --skip venv ."
